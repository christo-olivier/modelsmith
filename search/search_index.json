{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#welcome-to-modelsmith","title":"Welcome to Modelsmith","text":"<p>Modelsmith is a Python library that allows you to get structured responses in the form of Pydantic models and Python types from Google Vertex AI and OpenAI models.</p> <p>Currently it allows you to use the following classes of model:</p> <ul> <li> <p>AnthropicModel (used with Anthropic's full set of models)</p> </li> <li> <p>OpenAIModel (used with OpenAI's full set of models)</p> </li> <li> <p>GeminiModel (used with Google's full set of Gemini models)</p> </li> </ul> <p>Modelsmith provides a unified interface over all of these. It has been designed to be extensible and can adapt to other models in the future.</p>"},{"location":"#notable-features","title":"Notable Features","text":"<p> Structured Responses: Specify both Pydantic models and Python types as the outputs of your LLM responses.</p> <p> Templating: Use Jinja2 templating in your prompts to allow complex prompt logic.</p> <p> Default and Custom Prompts: A default prompt template is provided but you can also specify your own.</p> <p> Retry Logic: Number of retries is user configurable.</p> <p> Validation: Outputs from the LLM are validated against your requested response model. Errors are fed back to the LLM to try and correct any validation failures.</p>"},{"location":"getting_started/","title":"Getting started","text":""},{"location":"getting_started/#extracting-a-pydantic-model","title":"Extracting a Pydantic model","text":"<p>Lets look at an example of extracting a Pydantic model from some text.</p> <pre><code>from modelsmith import Forge, OpenAIModel\nfrom pydantic import BaseModel, Field\n\n\n# Define the pydantic model you want to receive as the response\nclass User(BaseModel):\n    name: str = Field(description=\"The person's name\")\n    age: int = Field(description=\"The person's age\")\n    city: str = Field(description=\"The city where the person lives\")\n    country: str = Field(description=\"The country where the person lives\")\n\n\n# Create your forge instance\nforge = Forge(model=OpenAIModel(\"gpt-5\"), response_model=User)\n\n# Generate a User instance from the prompt\nuser = forge.generate(\"Terry Tate 60. Lives in Irvine, United States.\")\n\nprint(user)  # name='Terry Tate' age=60 city='Irvine' country='United States'\n</code></pre>"},{"location":"getting_started/#extracting-a-combined-pydantic-and-python-type","title":"Extracting a combined Pydantic and Python type","text":"<p>Modelsmith does not restrict you to either Pydantic models or Python types. You can combine them in the same response. Below we extract a list of Pydantic model instances.</p> <pre><code>from modelsmith import Forge, GeminiModel\nfrom pydantic import BaseModel, Field\n\n\nclass City(BaseModel):\n    city: str = Field(description=\"The name of the city\")\n    state: str = Field(description=\"2-letter abbreviation of the state\")\n\n\n# Pass a list of Pydantic models to the response_model argument.\nforge = Forge(\n    model=GeminiModel(\"gemini-2.5-pro\"),\n    response_model=list[City],\n)\n\nresponse = forge.generate(\"I have lived in Irvine, CA and Dallas TX\")\n\nprint(response)  # [City(city='Irvine', state='CA'), City(city='Dallas', state='TX')]\n</code></pre>"},{"location":"getting_started/#using-different-model-types","title":"Using different model types","text":"<p>Using a different model is as simple as passing the desired model class to the Forge. Taking the example above lets use <code>gemini-2.5-flash</code> instead of <code>gemini-2.5-pro</code>.</p> <pre><code>from modelsmith import Forge, GeminiModel  # import the correct class\nfrom pydantic import BaseModel, Field\n\n\nclass City(BaseModel):\n    city: str = Field(description=\"The name of the city\")\n    state: str = Field(description=\"2-letter abbreviation of the state\")\n\n\n# gemini-2.5-flash instead of gemini-2.5-pro\nforge = Forge(\n    model=GeminiModel(\"gemini-2.5-flash\"),\n    response_model=list[City],\n)\n\nresponse = forge.generate(\"I have lived in Irvine, CA and Dallas TX\")\n\nprint(response)  # [City(city='Irvine', state='CA'), City(city='Dallas', state='TX')]\n</code></pre> <p>If we want to use an Anthropic model the same applies. Simply select the appropriate model class, specify which Anthropic model to use (in this case <code>claude-sonnet-4-20250514</code>), and pass it to the <code>Forge</code> instance.</p> <pre><code>from modelsmith import Forge, AnthropicModel  # import the correct class\nfrom pydantic import BaseModel, Field\n\n\nclass City(BaseModel):\n    city: str = Field(description=\"The name of the city\")\n    state: str = Field(description=\"2-letter abbreviation of the state\")\n\n\n# Anthropic's claude-sonnet-4-20250514 instead of gemini-2.5-flash\nforge = Forge(\n    model=AnthropicModel(\"claude-sonnet-4-20250514\"),\n    response_model=list[City],\n)\n\nresponse = forge.generate(\"I have lived in Irvine, CA and Dallas TX\")\n\nprint(response)  # [City(city='Irvine', state='CA'), City(city='Dallas', state='TX')]\n</code></pre>"},{"location":"getting_started/#using-the-default-prompt-template","title":"Using the default prompt template","text":"<p>The previous examples use the built in prompt template in zero-shot mode. The default template also works in few-shot mode and allows you to pass in examples via the <code>prompt_values</code> parameter of the <code>generate</code> method. The default prompt template has a template variable called <code>examples</code> that we pass our example text to. The following example shows how this can be used.</p> <pre><code>import inspect\n\nfrom modelsmith import Forge, GeminiModel\n\n# Create your forge instance\nforge = Forge(\n    model=GeminiModel(\"gemini-2.5-flash\"), response_model=list[str]\n)\n\n# Define examples, using inspect.cleandoc to remove indentation\nexamples = inspect.cleandoc(\"\"\"\n    input: John Doe is forty years old. Lives in Alton, England\n    output: [\"John Doe\", \"40\", \"Alton\", \"England\"]\n\n    input: Sarah Green lives in London, UK. She is 32 years old.\n    output: [\"Sarah Green\", \"32\", \"London\", \"UK\"]\n\"\"\")\n\n# Generate a Python list of string values from the input text\nresponse = forge.generate(\n    \"Sophia Schmidt twenty three. Resident in Berlin Germany.\",\n    prompt_values={\"examples\": examples},\n)\n\nprint(response)  # ['Sophia Schmidt', '23', 'Berlin', 'Germany']\n</code></pre>"},{"location":"getting_started/#using-your-own-prompt-template","title":"Using your own prompt template","text":"<p>If you want to use your own prompt you can simply pass it to the <code>prompt</code> parameter of the <code>Forge</code> class. Any jinja2 template variables will be replaced with the values provided in the <code>prompt_values</code> parameter of the <code>generate</code> method.</p> <p>\u26a0\ufe0f If using your own prompt include a jinja template variable called <code>response_model_json</code> to place your response model json schema in your preferred location. If <code>response_model_json</code> is not provided then the default response model template text will be appended to the end of your prompt.</p> <p>Here is an example of using a custom prompt that includes the <code>response_model_json</code> template variable.</p> <pre><code>import inspect\n\nfrom modelsmith import Forge, OpenAIModel\n\n# Create your custom prompt\nmy_prompt = inspect.cleandoc(\"\"\"\n    You are extracting city names from user provided text. You are only to extract\n    city names and you should ignore country names or any other entities that are not\n    cities.\n\n    You MUST take the types of the OUTPUT SCHEMA into account and adjust your\n    provided text to fit the required types.\n\n    Here is the OUTPUT SCHEMA:\n    {{ response_model_json }}\n\"\"\")\n\n# Create your forge instance, passing your prompt\nforge = Forge(\n    model=OpenAIModel(\"gpt-4o\"),\n    response_model=list,\n    prompt=my_prompt,\n)\n\n# Generate a your response\nresponse = forge.generate(\n    \"Berlin is the capital of Germany. London is the capital of England.\"\n)\n\nprint(response)  # ['Berlin', 'London']\n</code></pre> <p>The same example above would also work if the <code>response_model_json</code> was left out of the prompt due to this being added automatically if missing.</p> <pre><code>import inspect\n\nfrom modelsmith import Forge, GeminiModel\n\n# Create your custom prompt\nmy_prompt = inspect.cleandoc(\"\"\"\n    You are extracting city names from user provided text. You are only to extract\n    city names and you should ignore country names or any other entities that are not\n    cities.\n\"\"\")\n\n# Create your forge instance, passing your prompt\nforge = Forge(\n    model=GeminiModel(\"gemini-2.5-flash\"),\n    response_model=list,\n    prompt=my_prompt,\n)\n\n# Generate a your response\nresponse = forge.generate(\n    \"Berlin is the capital of Germany. London is the capital of England.\"\n)\n\nprint(response)  # ['Berlin', 'London']\n</code></pre>"},{"location":"getting_started/#placing-user_input-inside-your-prompt","title":"Placing user_input inside your prompt","text":"<p>By default user input is appended to the end of both custom and default prompts. Modelsmith allows you to place user input anywhere inside your custom prompt by adding the template variable <code>{{ user_input }}</code> where you want the user input to go.</p> <pre><code># Create your custom prompt with user input placed at the beginning\nmy_prompt = inspect.cleandoc(\"\"\"\n    Consider the following user input: {{ user_input }}\n\n    You are extracting numbers from user input and combing them into one number. \n    Take into account numbers written as text as well as in numerical format.\n\"\"\")\n</code></pre>"},{"location":"getting_started/#setting-the-number-of-retries","title":"Setting the number of retries","text":"<p>By default Modelsmith will try to get the desired response model from the LLM three times before raising an exception. On each retry the validation error is fed back to the LLM with a request to correct it. </p> <p>You can change this by passing the <code>max_retries</code> parameter to the <code>Forge</code> class.</p> <pre><code># Create your forge instance, setting the number of retries\nforge = Forge(\n    model=GeminiModel(\"gemini-2.5-pro\"), response_model=int, max_retries=2\n)\n</code></pre>"},{"location":"getting_started/#matching-patterns","title":"Matching patterns","text":"<p>Modelsmith looks for JSON output in the LLM response. It uses regular expressions to identify JSON output. If for any reason you want to use a different pattern you can pass it to the <code>match_pattern</code> parameter of the <code>Forge</code> class.</p>"},{"location":"getting_started/#failing-silently","title":"Failing silently","text":"<p>Modelsmith will raise a <code>ResponseNotDerivedError</code> exception if no valid response was obtained. You can change this by passing <code>False</code> to the <code>raise_on_failure</code> parameter of the <code>Forge</code> class.</p> <p>This will suppress the exception and return <code>None</code> instead.</p>"},{"location":"getting_started/#passing-prompt-template-variables-and-model-settings","title":"Passing prompt template variables and model settings","text":"<p>You can pass prompt template variables and model settings by passing them to the <code>prompt_values</code> and <code>model_settings</code> parameters of the <code>generate</code> method.</p> <pre><code>import inspect\n\nfrom modelsmith import Forge, OpenAIModel\n\n# Create your custom prompt\nmy_prompt = inspect.cleandoc(\"\"\"\n    You are extracting city names from user provided text. You are only to extract\n    city names and you should ignore country names or any other entities that are not\n    cities.\n\n    {{ user_input_prefix }}\n    {{ user_input }}\n\"\"\")\n\n# Create your forge instance, passing your prompt\nforge = Forge(\n    model=OpenAIModel(\"gpt-4o\"),\n    response_model=list,\n    prompt=my_prompt,\n    max_retries=2,\n)\n\n# Custom LLM settings\nmodel_settings = {\n    \"temperature\": 0.8,\n    \"top_p\": 1.0,\n}\n\n# Prompt template variable values to pass\nprompt_values = {\n    \"user_input_prefix\": \"I have a the following text to analyze: \",\n}\n\n# Generate a your response\nresponse = forge.generate(\n    \"Berlin is the capital of Germany. London is the capital of England.\",\n    prompt_values=prompt_values,\n    model_settings=model_settings,\n)\n\nprint(response)  # ['Berlin', 'London']\n</code></pre>"},{"location":"getting_started/#learn-more","title":"Learn more","text":"<p>Have a look at the tests included in this repository for more examples.</p>"},{"location":"installation/","title":"Installation","text":"<p>Install Modelsmith using pip or your favourite python package manager.</p> <p><code>pip</code> example: <pre><code>pip install modelsmith\n</code></pre></p>"},{"location":"installation/#anthropic-authentication","title":"Anthropic Authentication","text":"<p>Authentication to Anthropic is done via the Anthropic flow. See the Anthropic documentation for more details. </p> <p>The <code>AnthropicModel</code> class takes an optional <code>api_key</code> parameter. If not provided, the <code>ANTHROPIC_API_KEY</code> environment variable will be used.</p>"},{"location":"installation/#google-cloud-authentication","title":"Google Cloud Authentication","text":"<p>Authentication to Google Cloud is done via either: - Application Default Credentials flow. See Google's documentation for more details. - Gemini API Key. See Google Gemini API docs.</p> <p>The <code>GeminiModel</code> allows you to pass the <code>vertexai</code>, <code>api_key</code>, <code>project</code>, and <code>location</code> when you initialize the class instance. If you do not pass this in it will be inferred from the environment variables <code>GOOGLE_GENAI_USE_VERTEXAI</code>, <code>GOOGLE_API_KEY</code>, <code>GOOGLE_CLOUD_PROJECT</code>, and <code>GOOGLE_CLOUD_LOCATION</code> as per the documentation.</p>"},{"location":"installation/#open-ai-authentication","title":"Open AI Authentication","text":"<p>Authentication to OpenAI is done via the OpenAI flow. See the OpenAI documentation for more details.</p> <p>The <code>OpenAIModel</code> allows you to pass the <code>api_key</code>, <code>organization</code> and <code>project</code> when you initialize the class instance. If you do not pass this in it will be inferred from the environment variables <code>OPENAI_API_KEY</code>, <code>OPENAI_ORG_ID</code> and <code>OPENAI_PROJECT_ID</code> as per the OpenAI documentation.</p>"}]}